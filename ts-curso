# Configuração Inicial (Mínimo pra rodar um projeto em TS)
npm init
# Yarn permite rodar comandos sem passar o run | lock do yarn um pouco mais inteligente | sem grandes diferenças
typescript:
	- Facilidade de desenvolvimento em projetos grandes ou com vários times trabalhando (Nosso caso)
	- Legibilidade dos dados com estrutura completamente definida
	- Agilidade no desenvolvimento (tipagem, auto complete, code compile)
	- Prencenção de erros 
	- Typescript é uma linguagem assincrona
npm i --save-dev typescript@3.9.7
criar pasta src
criar arquivo de configuração do typescript (tsconfig.json)
script dist no package.json dist: "tsc"
script start no package.json start: "node dist/index"

# Configuração de desenvolvimento
npm i --save-dev ts-node-dev
script start:dev no package.json start: "ts-node-dev src/index.ts"

#Configurando ambiente de test Jest
npm i --save-dev jest ts-jest @types/jest
criar arquivo de configuração jest.config.json
npm i --save-dev supertest @types/supertest
criar o primeiro test: test/api/status/status.controller.test

# Configuração do server.js
npm i -S express
npm i --save-dev @types/express
criar a class src/server.ts

# Criar a primeira rota
criar a classe src/api/status/status.controller.ts

# configurar setup do jest
criar arquivo de setup jest.setup.ts

#configurar global.d.ts

#refatorar test/api/status/status.controller.test